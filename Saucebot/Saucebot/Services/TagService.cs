using System.Net;
using QuickType;

namespace Saucebot.Services
{
    public static class TagService
    {
        private static HttpClient tagClient = new()
        {
            BaseAddress = new Uri("https://ac.rule34.xxx/")
        };

        public static async Task<string[]> GetTags(string query = "")
        {
            if (query == "")
            { // User has not input a tag yet
                return GetPopular();
            }
            else
            {
                using HttpResponseMessage resp = await tagClient.GetAsync($"autocomplete.php?q={query}");
                if (!resp.IsSuccessStatusCode)
                {
                    throw new WebException(resp.ReasonPhrase);
                }
                string jsonResponse = await resp.Content.ReadAsStringAsync();
                return Tag.FromJson(jsonResponse).Select(x => x.Value).ToArray();
            }
        }

        public static string[] GetPopular()
        {
            return new string[] {
            "ass",
            "big_breasts",
            "big_thighs",
            "chubby",
            "curvy",
            "cum"
        };
        }
    }
}

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var tag = Tag.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Tag
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Tag
    {
        public static Tag[] FromJson(string json) => JsonConvert.DeserializeObject<Tag[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Tag[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
